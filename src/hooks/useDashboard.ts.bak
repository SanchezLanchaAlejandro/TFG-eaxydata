import { useState, useEffect, useCallback } from 'react';
import supabase from '@/lib/supabase';
import { useSupabaseData } from './useSupabaseData';

// Definici√≥n de tipos para los datos del dashboard
export type DashboardData = {
  totalValoraciones: number;
  polizasActivas: number;
  facturacionMensual: number;
  nuevosClientesMes: number;
  datosFacturacionAnual: { mes: string; facturacion: number }[];
  talleresDisponibles: { id: string | number; nombre: string }[];
  datosEstadoValoraciones: { mes: string; pendientes: number; en_curso: number; finalizadas: number }[];
  totalesEstadoValoraciones: { pendientes: number; en_curso: number; finalizadas: number };
  datosDistribucionPolizas: { name: string; value: number; color?: string }[];
  totalesPolizas: number;
};

export function useDashboard() {
  const [dashboardData, setDashboardData] = useState<DashboardData>({
    totalValoraciones: 0,
    polizasActivas: 0,
    facturacionMensual: 0,
    nuevosClientesMes: 0,
    datosFacturacionAnual: [],
    talleresDisponibles: [],
    datosEstadoValoraciones: [],
    totalesEstadoValoraciones: { pendientes: 0, en_curso: 0, finalizadas: 0 },
    datosDistribucionPolizas: [],
    totalesPolizas: 0
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const { userProfile } = useSupabaseData();
  const [tallerSeleccionado, setTallerSeleccionado] = useState<string | number | null>(null);
  
  // Funci√≥n para obtener los talleres disponibles seg√∫n el rol del usuario
  const fetchTalleresDisponibles = useCallback(async () => {
    if (!userProfile) return [];
    
    // Log para depuraci√≥n del perfil de usuario
    console.log('‚≠ê Perfil de usuario en fetchTalleresDisponibles:', {
      id: userProfile.id,
      role: userProfile.role,
      network_id: userProfile.network_id,
      workshop_id: userProfile.workshop_id
    });
    
    try {
      // GESTOR_TALLER no necesita ver el selector, pero le asignamos su taller para mostrar sus datos
      if (userProfile.role === 'GESTOR_TALLER') {
        console.log('üîç Usuario es GESTOR_TALLER, obteniendo solo su taller:', userProfile.workshop_id);
        if (userProfile.workshop_id) {
          const { data, error } = await supabase
            .from('workshops')
            .select('id, nombre_comercial')
            .eq('id', userProfile.workshop_id)
            .single();
          
          if (error) throw error;
          
          if (data) {
            return [{
              id: data.id,
              nombre: data.nombre_comercial
            }];
          }
        }
        return [];
      } 
      
      console.log('üîç Usuario es', userProfile.role, 'con network_id:', userProfile.network_id);
      
      // Para SUPER_ADMIN y GESTOR_RED
      let query = supabase.from('workshops').select('id, nombre_comercial');
      
      // Si es GESTOR_RED, filtramos por su network_id
      if (userProfile.role === 'GESTOR_RED' && userProfile.network_id) {
        console.log('üîç Filtrando por network_id para GESTOR_RED:', userProfile.network_id);
        query = query.eq('network_id', userProfile.network_id);
      }
      
      // SUPER_ADMIN tambi√©n debe filtrar por network_id si tiene uno asignado
      if (userProfile.role === 'SUPER_ADMIN' && userProfile.network_id) {
        console.log('üîç Filtrando por network_id para SUPER_ADMIN:', userProfile.network_id);
        query = query.eq('network_id', userProfile.network_id);
      }
      
      // Log para mostrar la consulta SQL que se ejecutar√°
      console.log('üîç Consulta a ejecutar:', query);
      
      const { data, error } = await query;
      
      if (error) throw error;
      
      console.log('üîç Talleres obtenidos:', data?.length, 'talleres');
      
      // Transformar los datos para que tengan la estructura esperada
      const talleres = (data || []).map(taller => ({
        id: taller.id,
        nombre: taller.nombre_comercial
      }));
      
      console.log('üîç Talleres procesados:', talleres);
      
      return talleres;
    } catch (err: any) {
      console.error('Error al obtener talleres disponibles:', err);
      return [];
    }
  }, [userProfile]);
  
  // Funci√≥n para normalizar el estado de la valoraci√≥n
  const normalizarEstado = (estado: string | null): 'pendiente' | 'en_curso' | 'finalizado' => {
    if (!estado) return 'pendiente';
    
    // Convertir a min√∫sculas y eliminar espacios
    const estadoLower = estado.toLowerCase().trim();
    
    // Normalizar el valor seg√∫n lo que venga de la base de datos
    if (estadoLower === 'finalizado' || estadoLower === 'completado' || estadoLower === 'terminado') {
      return 'finalizado';
    } else if (estadoLower === 'en_curso' || estadoLower === 'en curso' || estadoLower === 'proceso' || estadoLower === 'en proceso') {
      return 'en_curso';
    } else {
      return 'pendiente';
    }
  };
  
  // Funci√≥n para obtener los √∫ltimos 6 meses (incluyendo el actual)
  const obtenerUltimos6Meses = () => {
    const meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'];
    const fechaActual = new Date();
    const mesActual = fechaActual.getMonth();
    const anioActual = fechaActual.getFullYear();
    
    const ultimos6MesesInfo = [];
    
    for (let i = 5; i >= 0; i--) {
      // Calcular el √≠ndice del mes (0-11)
      let indiceMes = mesActual - i;
      let anio = anioActual;
      
      // Ajustar para meses del a√±o anterior
      if (indiceMes < 0) {
        indiceMes += 12;
        anio -= 1;
      }
      
      ultimos6MesesInfo.push({
        mes: meses[indiceMes],
        mesNumero: indiceMes,
        anio: anio
      });
    }
    
    return ultimos6MesesInfo;
  };

  // Funci√≥n para procesar datos de valoraciones por estado en los √∫ltimos 6 meses
  const procesarDatosEstadoValoraciones = (valoraciones: any[]) => {
    const mesesInfo = obtenerUltimos6Meses();
    
    // Inicializar los datos con ceros para cada mes
    const datosValoraciones = mesesInfo.map(info => ({
      mes: info.mes,
      mesNumero: info.mesNumero,
      anio: info.anio,
      pendientes: 0,
      en_curso: 0,
      finalizadas: 0
    }));
    
    // Inicializar totales
    const totalesValoraciones = {
      pendientes: 0,
      en_curso: 0,
      finalizadas: 0
    };
    
    if (!valoraciones || valoraciones.length === 0) {
      // Retornar datos vac√≠os pero con estructura correcta
      return {
        datos: datosValoraciones.map(dato => ({
          mes: dato.mes,
          pendientes: 0,
          en_curso: 0,
          finalizadas: 0
        })),
        totales: totalesValoraciones
      };
    }
    
    // Procesar cada valoraci√≥n
    valoraciones.forEach(valoracion => {
      const fechaCreacion = new Date(valoracion.fecha_creacion);
      const mesCreacion = fechaCreacion.getMonth();
      const anioCreacion = fechaCreacion.getFullYear();
      
      // Normalizar estado
      const estadoNormalizado = normalizarEstado(valoracion.estado);
      
      // Convertir el estado normalizado al formato requerido para los gr√°ficos
      let estadoGrafico: 'pendientes' | 'en_curso' | 'finalizadas';
      
      if (estadoNormalizado === 'pendiente') {
        estadoGrafico = 'pendientes';
      } else if (estadoNormalizado === 'en_curso') {
        estadoGrafico = 'en_curso';
      } else { // 'finalizado'
        estadoGrafico = 'finalizadas';
      }
      
      // Incrementar el total para este estado
      totalesValoraciones[estadoGrafico]++;
      
      // Buscar el mes correspondiente en nuestros datos y actualizar el contador
      mesesInfo.forEach((info, index) => {
        if (info.mesNumero === mesCreacion && info.anio === anioCreacion) {
          datosValoraciones[index][estadoGrafico]++;
        }
      });
    });
    
    // Formatear para el gr√°fico (eliminar propiedades que no necesitamos)
    const datosFormateados = datosValoraciones.map(dato => ({
      mes: dato.mes,
      pendientes: dato.pendientes,
      en_curso: dato.en_curso,
      finalizadas: dato.finalizadas
    }));
    
    return {
      datos: datosFormateados,
      totales: totalesValoraciones
    };
  };
  
  // Funci√≥n para obtener la facturaci√≥n mensual
  const fetchFacturacionMensual = useCallback(async (selectedWorkshopId: string | number | null = null) => {
    if (!userProfile) return 0;
    
    try {
      // Obtener el primer y √∫ltimo d√≠a del mes actual
      const now = new Date();
      const primerDiaMes = new Date(now.getFullYear(), now.getMonth(), 1);
      const ultimoDiaMes = new Date(now.getFullYear(), now.getMonth() + 1, 0);
      
      // Formatear las fechas para la consulta SQL
      const fechaInicio = primerDiaMes.toISOString().split('T')[0];
      const fechaFin = ultimoDiaMes.toISOString().split('T')[0];
      
      console.log(`üóìÔ∏è Consultando facturas desde ${fechaInicio} hasta ${fechaFin}`);
      
      let workshopIds: (string | number)[] = [];
      
      // Determinar qu√© workshop_ids utilizar seg√∫n el rol y la selecci√≥n
      if (selectedWorkshopId) {
        // Si hay un taller seleccionado, usamos ese
        workshopIds = [selectedWorkshopId];
      } else if (userProfile.role === 'GESTOR_TALLER' && userProfile.workshop_id) {
        // Para gestores de taller, usamos su taller asignado
        workshopIds = [userProfile.workshop_id];
      } else {
        // Para gestores de red y super admin, obtenemos los talleres filtrados por network_id si aplica
        let query = supabase.from('workshops').select('id');
        
        // Filtrar por network_id para GESTOR_RED
        if (userProfile.role === 'GESTOR_RED' && userProfile.network_id) {
          query = query.eq('network_id', userProfile.network_id);
        }
        
        // Filtrar por network_id para SUPER_ADMIN si tiene uno asignado
        if (userProfile.role === 'SUPER_ADMIN' && userProfile.network_id) {
          query = query.eq('network_id', userProfile.network_id);
        }
        
        const { data: talleres, error: errorTalleres } = await query;
        
        if (errorTalleres) throw errorTalleres;
        
        if (talleres && talleres.length > 0) {
          workshopIds = talleres.map(taller => taller.id);
        }
      }
      
      console.log('üîç Workshop IDs para consulta de facturas:', workshopIds);
      
      // Consulta para obtener la suma de las facturas del mes actual
      let queryFacturas;
      
      if (workshopIds.length > 0) {
        queryFacturas = supabase
          .from('facturas')
          .select('total_factura')
          .gte('fecha_emision', fechaInicio)
          .lte('fecha_emision', fechaFin)
          .eq('estado_cobro', true) // Solo facturas cobradas
          .in('workshop_id', workshopIds);
      } else {
        // Para super admin sin selecci√≥n, obtener todas las facturas
        queryFacturas = supabase
          .from('facturas')
          .select('total_factura')
          .gte('fecha_emision', fechaInicio)
          .lte('fecha_emision', fechaFin)
          .eq('estado_cobro', true); // Solo facturas cobradas
      }
      
      const { data: facturas, error: errorFacturas } = await queryFacturas;
      
      if (errorFacturas) throw errorFacturas;
      
      console.log('üîç Facturas cobradas obtenidas:', facturas?.length, 'en total');
      
      // Calcular la suma total de las facturas
      const totalFacturacion = facturas?.reduce((total, factura) => {
        return total + (factura.total_factura || 0);
      }, 0) || 0;
      
      console.log('üí∞ Facturaci√≥n mensual calculada:', totalFacturacion);
      
      return totalFacturacion;
    } catch (err: any) {
      console.error('Error al obtener facturaci√≥n mensual:', err);
      return 0;
    }
  }, [userProfile]);
  
  // Obtener los datos de facturaci√≥n para todos los meses del a√±o actual
  const fetchDatosFacturacionAnual = useCallback(async (selectedWorkshopId: string | number | null = null) => {
    if (!userProfile) return [];
    
    try {
      // Obtener el a√±o actual
      const now = new Date();
      const a√±oActual = now.getFullYear();
      
      // Lista de meses abreviados en espa√±ol
      const mesesAbreviados = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'];
      
      // Array para almacenar los datos de facturaci√≥n por mes
      const datosFacturacion = mesesAbreviados.map((mes, index) => ({
        mes,
        facturacion: 0
      }));
      
      // Obtener los IDs de talleres seg√∫n la selecci√≥n y rol
      let workshopIds: (string | number)[] = [];
      
      if (selectedWorkshopId) {
        // Si hay un taller seleccionado, usamos ese
        workshopIds = [selectedWorkshopId];
      } else if (userProfile.role === 'GESTOR_TALLER' && userProfile.workshop_id) {
        // Para gestores de taller, usamos su taller asignado
        workshopIds = [userProfile.workshop_id];
      } else {
        // Para gestores de red y super admin, obtenemos los talleres filtrados por network_id si aplica
        let query = supabase.from('workshops').select('id');
        
        // Filtrar por network_id para GESTOR_RED
        if (userProfile.role === 'GESTOR_RED' && userProfile.network_id) {
          query = query.eq('network_id', userProfile.network_id);
        }
        
        // Filtrar por network_id para SUPER_ADMIN si tiene uno asignado
        if (userProfile.role === 'SUPER_ADMIN' && userProfile.network_id) {
          query = query.eq('network_id', userProfile.network_id);
        }
        
        const { data: talleres, error: errorTalleres } = await query;
        
        if (errorTalleres) throw errorTalleres;
        
        if (talleres && talleres.length > 0) {
          workshopIds = talleres.map(taller => taller.id);
        }
      }
      
      console.log('üîç Workshop IDs para consulta de facturaci√≥n anual:', workshopIds);
      
      // Consulta para obtener las facturas del a√±o actual
      let queryFacturas;
      
      if (workshopIds.length > 0) {
        queryFacturas = supabase
          .from('facturas')
          .select('fecha_emision, total_factura')
          .gte('fecha_emision', `${a√±oActual}-01-01`)
          .lte('fecha_emision', `${a√±oActual}-12-31`)
          .eq('estado_cobro', true) // Solo facturas cobradas
          .in('workshop_id', workshopIds);
      } else {
        // Para super admin sin selecci√≥n, obtener todas las facturas
        queryFacturas = supabase
          .from('facturas')
          .select('fecha_emision, total_factura')
          .gte('fecha_emision', `${a√±oActual}-01-01`)
          .lte('fecha_emision', `${a√±oActual}-12-31`)
          .eq('estado_cobro', true); // Solo facturas cobradas
      }
      
      const { data: facturas, error: errorFacturas } = await queryFacturas;
      
      if (errorFacturas) throw errorFacturas;
      
      console.log('üìä Facturas cobradas anuales obtenidas:', facturas?.length, 'en total');
      
      // Procesar las facturas y actualizar los datos de facturaci√≥n
      if (facturas && facturas.length > 0) {
        facturas.forEach(factura => {
          // Obtener el mes de la fecha (0-11)
          const fechaFactura = new Date(factura.fecha_emision);
          const mesIndex = fechaFactura.getMonth();
          
          // Sumar la facturaci√≥n al mes correspondiente
          datosFacturacion[mesIndex].facturacion += factura.total_factura || 0;
        });
      }
      
      console.log('üìä Datos de facturaci√≥n anual procesados:', datosFacturacion);
      
      // Obtener el mes actual (0-11)
      const mesActual = new Date().getMonth();
      
      // Reordenar para que los √∫ltimos 6 meses est√©n en orden cronol√≥gico
      const √∫ltimos6MesesOrdenados = [];
      for (let i = 5; i >= 0; i--) {
        const indice = (mesActual - i + 12) % 12; // Asegura √≠ndices positivos
        √∫ltimos6MesesOrdenados.push(datosFacturacion[indice]);
      }
      
      return √∫ltimos6MesesOrdenados;
    } catch (err: any) {
      console.error('Error al obtener datos de facturaci√≥n anual:', err);
      return [];
    }
  }, [userProfile]);
  
  // Funci√≥n para obtener los nuevos clientes del mes actual
  const fetchNuevosClientesMes = useCallback(async (selectedWorkshopId: string | number | null = null) => {
    if (!userProfile) return 0;
    
    try {
      // Obtener el primer y √∫ltimo d√≠a del mes actual
      const now = new Date();
      const primerDiaMes = new Date(now.getFullYear(), now.getMonth(), 1);
      const ultimoDiaMes = new Date(now.getFullYear(), now.getMonth() + 1, 0);
      
      // Formatear las fechas para la consulta SQL
      const fechaInicio = primerDiaMes.toISOString().split('T')[0];
      const fechaFin = ultimoDiaMes.toISOString().split('T')[0];
      
      console.log(`üóìÔ∏è Consultando clientes nuevos desde ${fechaInicio} hasta ${fechaFin}`);
      
      let workshopIds: (string | number)[] = [];
      
      // Determinar qu√© workshop_ids utilizar seg√∫n el rol y la selecci√≥n
      if (selectedWorkshopId) {
        // Si hay un taller seleccionado, usamos ese
        workshopIds = [selectedWorkshopId];
      } else if (userProfile.role === 'GESTOR_TALLER' && userProfile.workshop_id) {
        // Para gestores de taller, usamos su taller asignado
        workshopIds = [userProfile.workshop_id];
      } else {
        // Para gestores de red y super admin, obtenemos los talleres filtrados por network_id si aplica
        let query = supabase.from('workshops').select('id');
        
        // Filtrar por network_id para GESTOR_RED
        if (userProfile.role === 'GESTOR_RED' && userProfile.network_id) {
          query = query.eq('network_id', userProfile.network_id);
        }
        
        // Filtrar por network_id para SUPER_ADMIN si tiene uno asignado
        if (userProfile.role === 'SUPER_ADMIN' && userProfile.network_id) {
          query = query.eq('network_id', userProfile.network_id);
        }
        
        const { data: talleres, error: errorTalleres } = await query;
        
        if (errorTalleres) throw errorTalleres;
        
        if (talleres && talleres.length > 0) {
          workshopIds = talleres.map(taller => taller.id);
        }
      }
      
      console.log('üîç Workshop IDs para consulta de clientes nuevos:', workshopIds);
      
      // Consulta para obtener los clientes creados en el mes actual
      let queryClientes;
      
      if (workshopIds.length > 0) {
        queryClientes = supabase
          .from('clientes')
          .select('id')
          .gte('fecha_creacion', fechaInicio)
          .lte('fecha_creacion', fechaFin)
          .in('workshop_id', workshopIds);
      } else {
        // Para super admin sin selecci√≥n, obtener todos los clientes
        queryClientes = supabase
          .from('clientes')
          .select('id')
          .gte('fecha_creacion', fechaInicio)
          .lte('fecha_creacion', fechaFin);
      }
      
      const { data: clientes, error: errorClientes } = await queryClientes;
      
      if (errorClientes) throw errorClientes;
      
      const totalClientesNuevos = clientes?.length || 0;
      
      console.log('üë§ Nuevos clientes del mes:', totalClientesNuevos);
      
      return totalClientesNuevos;
    } catch (err: any) {
      console.error('Error al obtener nuevos clientes del mes:', err);
      return 0;
    }
  }, [userProfile]);
  
  // Funci√≥n para obtener el total de valoraciones y p√≥lizas activas
  const fetchDashboardData = useCallback(async (selectedWorkshopId: string | number | null = null) => {
    if (!userProfile) return null;
    
    try {
      setLoading(true);
      setError(null);
      
      let workshopIds: (string | number)[] = [];
      
      // Determinar qu√© workshop_ids utilizar seg√∫n el rol y la selecci√≥n
      if (selectedWorkshopId) {
        // Si hay un taller seleccionado, usamos ese
        workshopIds = [selectedWorkshopId];
      } else if (userProfile.role === 'GESTOR_TALLER' && userProfile.workshop_id) {
        // Para gestores de taller, usamos su taller asignado
        workshopIds = [userProfile.workshop_id];
      } else {
        // Para gestores de red y super admin, obtenemos los talleres filtrados por network_id si aplica
        let query = supabase.from('workshops').select('id');
        
        // Filtrar por network_id para GESTOR_RED
        if (userProfile.role === 'GESTOR_RED' && userProfile.network_id) {
          query = query.eq('network_id', userProfile.network_id);
        }
        
        // Filtrar por network_id para SUPER_ADMIN si tiene uno asignado
        if (userProfile.role === 'SUPER_ADMIN' && userProfile.network_id) {
          query = query.eq('network_id', userProfile.network_id);
        }
        
        const { data: talleres, error: errorTalleres } = await query;
        
        if (errorTalleres) throw errorTalleres;
        
        if (talleres && talleres.length > 0) {
          workshopIds = talleres.map(taller => taller.id);
        }
      }
      
      console.log('üîç Workshop IDs para consulta de valoraciones:', workshopIds);
      
      // Consulta para obtener las valoraciones
      let queryValoraciones;
      
      if (workshopIds.length > 0) {
        queryValoraciones = supabase
          .from('valoraciones')
          .select('*') // Seleccionamos todos los campos para normalizar el estado correctamente
          .in('workshop_id', workshopIds);
      } else {
        // Para super admin sin selecci√≥n, obtener todas las valoraciones
        queryValoraciones = supabase
          .from('valoraciones')
          .select('*');
      }
      
      const { data: valoraciones, error: errorValoraciones } = await queryValoraciones;
      
      if (errorValoraciones) throw errorValoraciones;
      
      console.log('üîç Valoraciones obtenidas:', valoraciones?.length, 'en total');
      console.log('üîç Muestra de estados:', valoraciones?.slice(0, 5).map(v => v.estado));
      
      if (!valoraciones || valoraciones.length === 0) {
        console.log('‚ö†Ô∏è No se encontraron valoraciones');
        setDashboardData(prevData => ({
          ...prevData,
          totalValoraciones: 0,
          polizasActivas: 0,
          datosDistribucionPolizas: [],
          totalesPolizas: 0
        }));
        setLoading(false);
        return { 
          totalValoraciones: 0, 
          polizasActivas: 0,
          datosDistribucionPolizas: [],
          totalesPolizas: 0
        };
      }
      
      // Normalizar los estados
      const valoracionesNormalizadas = valoraciones.map(v => ({
        ...v,
        estadoNormalizado: normalizarEstado(v.estado)
      }));
      
      // Log para mostrar los estados de valoraciones obtenidos para depuraci√≥n
      const estadosCount = {
        pendiente: valoracionesNormalizadas.filter(v => v.estadoNormalizado === 'pendiente').length,
        en_curso: valoracionesNormalizadas.filter(v => v.estadoNormalizado === 'en_curso').length,
        finalizado: valoracionesNormalizadas.filter(v => v.estadoNormalizado === 'finalizado').length
      };
      
      console.log('üîç Distribuci√≥n de estados de valoraciones normalizados:', estadosCount);
      
      // Calcular estad√≠sticas
      const totalValoraciones = valoracionesNormalizadas.length;
      
      // Las p√≥lizas activas son las valoraciones con estado "en_curso"
      const polizasActivas = valoracionesNormalizadas.filter(v => v.estadoNormalizado === 'en_curso').length;
      
      // Obtener la facturaci√≥n mensual
      const facturacionMensual = await fetchFacturacionMensual(selectedWorkshopId);
      
      // Obtener los datos de facturaci√≥n anual para el gr√°fico
      const datosFacturacionAnual = await fetchDatosFacturacionAnual(selectedWorkshopId);
      
      // Obtener los nuevos clientes del mes actual
      const nuevosClientesMes = await fetchNuevosClientesMes(selectedWorkshopId);
      
      // Procesar datos de valoraciones por estado
      const { datos: datosEstadoValoraciones, totales: totalesEstadoValoraciones } = 
        procesarDatosEstadoValoraciones(valoraciones || []);
      
      console.log('üìä Datos estado valoraciones:', datosEstadoValoraciones);
      console.log('üìä Totales estado valoraciones:', totalesEstadoValoraciones);
      
      // Obtener datos de distribuci√≥n de p√≥lizas
      let datosDistribucionPolizas: { name: string; value: number; color?: string }[] = [];
      let totalesPolizas = 0;
      
      try {
        // Usamos directamente las valoraciones normalizadas que ya tenemos
        const polizasEnCurso = valoracionesNormalizadas.filter(valoracion => 
          valoracion.estadoNormalizado === 'en_curso'
        );
        
        console.log('üîç P√≥lizas en curso filtradas:', polizasEnCurso.length);
        console.log('üîç Muestra de estados:', polizasEnCurso.slice(0, 5).map(p => p.estado));
        console.log('üîç Muestra de tipos de p√≥lizas:', polizasEnCurso.slice(0, 5).map(p => p.tipo_poliza));
        
        // Agrupar por tipo de p√≥liza
        const conteoPolizas = {
          'Todo Riesgo': 0,
          'Terceros Ampliado': 0,
          'Terceros': 0,
          'Otros': 0
        };
        
        polizasEnCurso.forEach(poliza => {
          const tipoPoliza = poliza.tipo_poliza?.trim() || '';
          
          if (!tipoPoliza) {
            conteoPolizas['Otros']++;
          } else if (tipoPoliza.toLowerCase().includes('todo') && tipoPoliza.toLowerCase().includes('riesgo')) {
            conteoPolizas['Todo Riesgo']++;
          } else if (tipoPoliza.toLowerCase().includes('terceros') && tipoPoliza.toLowerCase().includes('ampliado')) {
            conteoPolizas['Terceros Ampliado']++;
          } else if (tipoPoliza.toLowerCase().includes('terceros')) {
            conteoPolizas['Terceros']++;
          } else {
            conteoPolizas['Otros']++;
          }
        });
        
        // Crear los datos para el gr√°fico
        datosDistribucionPolizas = [
          { name: 'Todo Riesgo', value: conteoPolizas['Todo Riesgo'], color: '#3b82f6' },
          { name: 'Terceros Ampliado', value: conteoPolizas['Terceros Ampliado'], color: '#8b5cf6' },
          { name: 'Terceros', value: conteoPolizas['Terceros'], color: '#10b981' },
          { name: 'Otros', value: conteoPolizas['Otros'], color: '#6b7280' }
        ];
        
        // Filtrar categor√≠as sin valores para el gr√°fico
        const datosFiltrados = datosDistribucionPolizas.filter(d => d.value > 0);
        datosDistribucionPolizas = datosFiltrados.length > 0 ? datosFiltrados : datosDistribucionPolizas;
        
        // Calcular total de p√≥lizas
        totalesPolizas = conteoPolizas['Todo Riesgo'] + conteoPolizas['Terceros Ampliado'] + 
                         conteoPolizas['Terceros'] + conteoPolizas['Otros'];
      } catch (errPolizas: any) {
        console.error('Error al obtener datos de distribuci√≥n de p√≥lizas:', errPolizas);
        // No propagamos el error para no interrumpir el resto de la carga
      }
      
      console.log('üìä Datos distribuci√≥n p√≥lizas:', datosDistribucionPolizas);
      console.log('üìä Total p√≥lizas:', totalesPolizas);
      
      // Actualizar los datos del dashboard
      setDashboardData(prevData => ({
        ...prevData,
        totalValoraciones,
        polizasActivas,
        facturacionMensual,
        datosFacturacionAnual,
        nuevosClientesMes,
        datosEstadoValoraciones,
        totalesEstadoValoraciones,
        datosDistribucionPolizas,
        totalesPolizas
      }));
      
      return {
        totalValoraciones,
        polizasActivas,
        facturacionMensual,
        datosFacturacionAnual,
        nuevosClientesMes,
        datosEstadoValoraciones,
        totalesEstadoValoraciones,
        datosDistribucionPolizas,
        totalesPolizas
      };
    } catch (err: any) {
      console.error('Error al obtener datos del dashboard:', err);
      setError(err.message || 'Error al cargar los datos del dashboard');
      return null;
    } finally {
      setLoading(false);
    }
  }, [userProfile, fetchFacturacionMensual, fetchDatosFacturacionAnual, fetchNuevosClientesMes]);
  
  // Efecto para cargar los talleres disponibles
  useEffect(() => {
    if (userProfile) {
      console.log('‚úÖ Cargando talleres disponibles. Perfil de usuario:', userProfile.role);
      
      const loadTalleres = async () => {
        const talleres = await fetchTalleresDisponibles();
        setDashboardData(prevData => ({
          ...prevData,
          talleresDisponibles: talleres
        }));
        
        // Para GESTOR_TALLER, establecer su taller autom√°ticamente
        if (userProfile.role === 'GESTOR_TALLER' && userProfile.workshop_id) {
          console.log('‚úÖ GESTOR_TALLER: asignando workshop_id autom√°ticamente:', userProfile.workshop_id);
          // Primero verificamos que este workshop_id est√© en la lista de talleres disponibles
          const tallerExiste = talleres.some(t => t.id === userProfile.workshop_id);
          if (tallerExiste) {
            setTallerSeleccionado(userProfile.workshop_id);
          } else {
            // Si el taller no existe en la lista, lo a√±adimos para evitar errores
            console.warn('‚ö†Ô∏è El workshop_id asignado no est√° en la lista de talleres disponibles');
            if (userProfile.workshop_id) {
              const { data } = await supabase
                .from('workshops')
                .select('id, nombre_comercial')
                .eq('id', userProfile.workshop_id)
                .single();
              
              if (data) {
                const nuevoTaller = {
                  id: data.id,
                  nombre: data.nombre_comercial
                };
                const talleresActualizados = [...talleres, nuevoTaller];
                setDashboardData(prevData => ({
                  ...prevData,
                  talleresDisponibles: talleresActualizados
                }));
                setTallerSeleccionado(userProfile.workshop_id);
              }
            }
          }
        }
      };
      
      loadTalleres();
    }
  }, [userProfile, fetchTalleresDisponibles]);
  
  // Efecto para cargar los datos del dashboard cuando cambia el taller seleccionado
  useEffect(() => {
    if (userProfile) {
      fetchDashboardData(tallerSeleccionado);
    }
  }, [userProfile, tallerSeleccionado, fetchDashboardData]);
  
  // Funci√≥n para cambiar el taller seleccionado
  const cambiarTallerSeleccionado = async (tallerId: string | number | null) => {
    console.log('üîÑ Cambiando taller seleccionado a:', tallerId);
    
    // Mostrar un estado de carga mientras se obtienen los nuevos datos
    setLoading(true);
    
    // Actualizar el taller seleccionado inmediatamente para que la UI refleje el cambio
    setTallerSeleccionado(tallerId);
    
    try {
      // Paralelizar todas las consultas independientes usando Promise.all
      const [
        talleres,
        valoracionesResult,
        facturacionMensual,
        datosFacturacionAnual,
        nuevosClientesMes
      ] = await Promise.all([
        // 1. Obtener talleres disponibles
        fetchTalleresDisponibles(),
        
        // 2. Obtener valoraciones (definimos la funci√≥n inline para valoraciones)
        (async () => {
          // Determinar qu√© workshop_ids utilizar
          let workshopIds: (string | number)[] = [];
          
          if (tallerId) {
            workshopIds = [tallerId];
          } else if (userProfile?.role === 'GESTOR_TALLER' && userProfile.workshop_id) {
            workshopIds = [userProfile.workshop_id];
          } else {
            // Obtener IDs de talleres para admin o gestor de red
            const query = supabase.from('workshops').select('id');
            
            if (userProfile?.role === 'GESTOR_RED' && userProfile.network_id) {
              query.eq('network_id', userProfile.network_id);
            }
            
            if (userProfile?.role === 'SUPER_ADMIN' && userProfile.network_id) {
              query.eq('network_id', userProfile.network_id);
            }
            
            const { data: talleresData } = await query;
            
            if (talleresData && talleresData.length > 0) {
              workshopIds = talleresData.map(taller => taller.id);
            }
          }
          
          // Consultar valoraciones
          let queryValoraciones;
          
          if (workshopIds.length > 0) {
            queryValoraciones = supabase
              .from('valoraciones')
              .select('*')
              .in('workshop_id', workshopIds);
          } else {
            queryValoraciones = supabase
              .from('valoraciones')
              .select('*');
          }
          
          const { data: valoraciones, error: errorValoraciones } = await queryValoraciones;
          
          if (errorValoraciones) throw errorValoraciones;

          return { valoraciones: valoraciones || [], workshopIds };
        })(),
        
        // 3. Obtener facturaci√≥n mensual
        fetchFacturacionMensual(tallerId),
        
        // 4. Obtener datos de facturaci√≥n anual
        fetchDatosFacturacionAnual(tallerId),
        
        // 5. Obtener nuevos clientes
        fetchNuevosClientesMes(tallerId)
      ]);
      
      // Procesar los datos de valoraciones
      let totalValoraciones = 0;
      let polizasActivas = 0;
      let datosEstadoValoraciones: { mes: string; pendientes: number; en_curso: number; finalizadas: number }[] = [];
      let totalesEstadoValoraciones = { pendientes: 0, en_curso: 0, finalizadas: 0 };
      const { valoraciones, workshopIds } = valoracionesResult;
      
      if (valoraciones.length > 0) {
        const valoracionesNormalizadas = valoraciones.map(v => ({
          ...v,
          estadoNormalizado: normalizarEstado(v.estado)
        }));
        
        totalValoraciones = valoracionesNormalizadas.length;
        polizasActivas = valoracionesNormalizadas.filter(v => v.estadoNormalizado === 'en_curso').length;
        
        // Procesar datos para el gr√°fico de valoraciones
        const datosEstadoResult = procesarDatosEstadoValoraciones(valoraciones);
        datosEstadoValoraciones = datosEstadoResult.datos;
        totalesEstadoValoraciones = datosEstadoResult.totales;
      }
      
      // Obtener datos de distribuci√≥n de p√≥lizas
      let datosDistribucionPolizas: { name: string; value: number; color?: string }[] = [];
      let totalesPolizas = 0;
      
      try {
        // Usamos directamente las valoraciones normalizadas que ya tenemos
        const polizasEnCurso = valoracionesNormalizadas.filter(valoracion => 
          valoracion.estadoNormalizado === 'en_curso'
        );
        
        console.log('üîç P√≥lizas en curso filtradas:', polizasEnCurso.length);
        console.log('üîç Muestra de estados:', polizasEnCurso.slice(0, 5).map(p => p.estado));
        console.log('üîç Muestra de tipos de p√≥lizas:', polizasEnCurso.slice(0, 5).map(p => p.tipo_poliza));
        
        // Agrupar por tipo de p√≥liza
        const conteoPolizas = {
          'Todo Riesgo': 0,
          'Terceros Ampliado': 0,
          'Terceros': 0,
          'Otros': 0
        };
        
        polizasEnCurso.forEach(poliza => {
          const tipoPoliza = poliza.tipo_poliza?.trim() || '';
          
          if (!tipoPoliza) {
            conteoPolizas['Otros']++;
          } else if (tipoPoliza.toLowerCase().includes('todo') && tipoPoliza.toLowerCase().includes('riesgo')) {
            conteoPolizas['Todo Riesgo']++;
          } else if (tipoPoliza.toLowerCase().includes('terceros') && tipoPoliza.toLowerCase().includes('ampliado')) {
            conteoPolizas['Terceros Ampliado']++;
          } else if (tipoPoliza.toLowerCase().includes('terceros')) {
            conteoPolizas['Terceros']++;
          } else {
            conteoPolizas['Otros']++;
          }
        });
        
        // Crear los datos para el gr√°fico
        datosDistribucionPolizas = [
          { name: 'Todo Riesgo', value: conteoPolizas['Todo Riesgo'], color: '#3b82f6' },
          { name: 'Terceros Ampliado', value: conteoPolizas['Terceros Ampliado'], color: '#8b5cf6' },
          { name: 'Terceros', value: conteoPolizas['Terceros'], color: '#10b981' },
          { name: 'Otros', value: conteoPolizas['Otros'], color: '#6b7280' }
        ];
        
        // Filtrar categor√≠as sin valores para el gr√°fico
        const datosFiltrados = datosDistribucionPolizas.filter(d => d.value > 0);
        datosDistribucionPolizas = datosFiltrados.length > 0 ? datosFiltrados : datosDistribucionPolizas;
        
        // Calcular total de p√≥lizas
        totalesPolizas = conteoPolizas['Todo Riesgo'] + conteoPolizas['Terceros Ampliado'] + 
                         conteoPolizas['Terceros'] + conteoPolizas['Otros'];
      } catch (errPolizas: any) {
        console.error('Error al obtener datos de distribuci√≥n de p√≥lizas:', errPolizas);
        // No propagamos el error para no interrumpir el resto de la carga
      }
      
      // Actualizar todos los datos del dashboard a la vez
      setDashboardData({
        totalValoraciones,
        polizasActivas,
        facturacionMensual,
        nuevosClientesMes,
        datosFacturacionAnual,
        talleresDisponibles: talleres,
        datosEstadoValoraciones,
        totalesEstadoValoraciones,
        datosDistribucionPolizas,
        totalesPolizas
      });
      
      console.log('üìä Datos actualizados al cambiar taller:', {
        tallerId,
        totalValoraciones,
        polizasActivas,
        facturacionMensual,
        nuevosClientesMes,
        totalesPolizas
      });
    } catch (err: any) {
      console.error('Error al cambiar el taller seleccionado:', err);
      setError(err.message || 'Error al cambiar el taller seleccionado');
    } finally {
      setLoading(false);
    }
  };

  return {
    dashboardData,
    loading,
    error,
    tallerSeleccionado,
    cambiarTallerSeleccionado,
    refetchData: () => fetchDashboardData(tallerSeleccionado)
  };
} 